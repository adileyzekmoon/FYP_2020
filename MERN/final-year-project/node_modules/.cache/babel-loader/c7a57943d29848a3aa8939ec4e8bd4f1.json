{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AdilAzmoon\\\\Desktop\\\\Mini Projects\\\\FYP\\\\FYP_2020\\\\MERN\\\\final-year-project\\\\src\\\\components\\\\Home.jsx\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport axios from 'axios';\nimport CanvasJSReact from './canvasjs.react'; //var CanvasJSReact = require('./canvasjs.react');\n\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: \"Patient\",\n      patients: [\"Adil\", \"Patrice\", \"Brandy\"],\n      history: null,\n      predictionClasses: [0, 100, 12.5, 25, 37.5, 50, 62.5, 75, 87.5],\n      loginEmail: null,\n      loginPassword: null\n    };\n\n    this.loginHandler = event => {\n      event.preventDefault();\n      axios.post('http://localhost:3001/user/login', {\n        email: this.state.loginEmail,\n        password: this.state.loginPassword\n      }).then(res => {\n        if (res.data != \"\") {\n          console.log(res);\n          this.setState({\n            name: res.data.name,\n            loginEmail: null,\n            loginPassword: null,\n            login: true\n          });\n        } else this.setState({\n          loginStatus: \"Invalid username and password.\"\n        });\n      });\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.location.state.login) {\n      this.setState({\n        login: this.props.location.state.login\n      });\n    } else {\n      this.setState({\n        login: false\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    axios.get('http://localhost:3001/user/history', {\n      params: {\n        name: this.state.name\n      }\n    }).then(res => this.setState({\n      history: res.data\n    }));\n  }\n\n  loginPage() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"emailAddress\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Email address\"), React.createElement(\"input\", {\n      type: \"email\",\n      className: \"form-control\",\n      id: \"emailAddress\",\n      name: \"loginEmail\",\n      \"aria-describedby\": \"emailHelp\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"inputPassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Password\"), React.createElement(\"input\", {\n      type: \"password\",\n      className: \"form-control\",\n      id: \"inputPassword\",\n      name: \"loginPassword\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary\",\n      onClick: this.loginHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.state.loginStatus)));\n  }\n\n  renderGraphsDoc() {\n    if (this.state.history != null && this.state.history != 0) {\n      return React.createElement(\"div\", {\n        className: \"row d-flex justify-content-center text-center w-100 m-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, this.state.patients.map(patient => React.createElement(\"div\", {\n        className: \"col-md-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(CanvasJSChart, {\n        options: this.patientGraph(patient)\n        /* onRef={ref => this.chart = ref} */\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }))));\n    }\n  }\n\n  renderGraphsPat(patient) {\n    if (this.state.history != null && this.state.history != 0) {\n      return React.createElement(\"div\", {\n        className: \"row d-flex justify-content-center text-center w-100 m-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(CanvasJSChart, {\n        options: this.patientGraph(patient)\n        /* onRef={ref => this.chart = ref} */\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      })));\n    } else return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"No data yet.\");\n  }\n\n  patientGraph(patient) {\n    var dateData = this.state.history.data;\n    console.log(dateData);\n    var xPoints = [];\n    var yPoints = [];\n    var datePoints = [];\n    var recovDate = [];\n    recovDate.push({\n      x: 0,\n      y: 0\n    });\n    const initialDate = new Date(dateData[0].date);\n    console.log(initialDate);\n    dateData.forEach(element => {\n      const currentDate = new Date(element.date);\n      var dateDiff = (currentDate - initialDate) / (1000 * 60 * 60 * 24);\n      console.log(dateDiff);\n      xPoints.push(dateDiff);\n      yPoints.push(this.state.predictionClasses[element.result]);\n      datePoints.push({\n        x: dateDiff,\n        y: this.state.predictionClasses[element.result]\n      });\n    });\n    console.log(datePoints);\n    const projectedRecoveryDate = this.findLineByLeastSquares(xPoints, yPoints);\n    recovDate.push({\n      x: projectedRecoveryDate,\n      y: 90 //                     markerColor: \"red\",\n      //                     markerType: \"triangle\",\n      //                     indexLabel: \"Projected recovery date\",\n      //                     indexLabelOrientation: \"vertical\"\n\n    });\n    const options = {\n      animationEnabled: true,\n      exportEnabled: true,\n      theme: \"light2\",\n      // \"light1\", \"dark1\", \"dark2\"\n      title: {\n        text: patient\n      },\n      axisY: {\n        title: \"Recovery Rate\",\n        includeZero: false,\n        suffix: \"%\"\n      },\n      axisX: {\n        title: \"Days since start\",\n        prefix: \"D\",\n        interval: 2\n      },\n      data: [{\n        type: \"spline\",\n        name: \"Recovery timeline\",\n        toolTipContent: \"Day {x}: {y}%\",\n        dataPoints: datePoints,\n        showInLegend: true\n      }, {\n        type: \"line\",\n        name: \"Projected recovery\",\n        toolTipContent: \"Day {x}: {y}%\",\n        lineDashType: \"dash\",\n        dataPoints: recovDate,\n        showInLegend: true\n      }]\n    };\n    return options;\n  }\n\n  findLineByLeastSquares(values_x, values_y) {\n    var sum_x = 0;\n    var sum_y = 0;\n    var sum_xy = 0;\n    var sum_xx = 0;\n    var count = 0;\n    /*\r\n     * We'll use those variables for faster read/write access.\r\n     */\n\n    var x = 0;\n    var y = 0;\n    var values_length = values_x.length;\n\n    if (values_length != values_y.length) {\n      throw new Error('The parameters values_x and values_y need to have same size!');\n    }\n    /*\r\n     * Nothing to do.\r\n     */\n\n\n    if (values_length === 0) {\n      return [[], []];\n    }\n    /*\r\n     * Calculate the sum for each of the parts necessary.\r\n     */\n\n\n    for (var v = 0; v < values_length; v++) {\n      x = values_x[v];\n      y = values_y[v];\n      sum_x += x;\n      sum_y += y;\n      sum_xx += x * x;\n      sum_xy += x * y;\n      count++;\n    }\n    /*\r\n     * Calculate m and b for the formular:\r\n     * y = x * m + b\r\n     * x = (y - b) / m\r\n     */\n\n\n    var m = (count * sum_xy - sum_x * sum_y) / (count * sum_xx - sum_x * sum_x);\n    var b = sum_y / count - m * sum_x / count;\n    return (90 - b) / m;\n    /*\r\n     * We will make the x and y result line now\r\n     */\n    //    var result_values_x = [];\n    //    var result_values_y = [];\n    //\n    //    for (var v = 0; v &lt; values_length; v++) {\n    //        x = values_x[v];\n    //        y = x * m + b;\n    //        result_values_x.push(x);\n    //        result_values_y.push(y);\n    //    }\n    //\n    //    return [result_values_x, result_values_y];\n  }\n\n  render() {\n    if (this.state.login != true) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        user: \"Login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }), this.loginPage());\n    }\n\n    if (this.state.login == true && this.state.user == \"Patient\") {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        user: this.state.user,\n        login: this.state.login,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container-fluid d-flex align-items-center justify-content-center h-100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, this.renderGraphsPat(this.state.name)));\n    } else if (this.state.login == true && this.state.user == \"Doctor\") {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        user: \"Doctor\",\n        login: this.state.login,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container-fluid d-flex align-items-center justify-content-center h-100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, this.renderGraphsDoc()));\n    }\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/AdilAzmoon/Desktop/Mini Projects/FYP/FYP_2020/MERN/final-year-project/src/components/Home.jsx"],"names":["React","Component","BrowserRouter","Router","Switch","Route","Link","Navbar","axios","CanvasJSReact","CanvasJS","CanvasJSChart","Home","state","user","patients","history","predictionClasses","loginEmail","loginPassword","loginHandler","event","preventDefault","post","email","password","then","res","data","console","log","setState","name","login","loginStatus","onChange","target","value","componentDidMount","props","location","componentDidUpdate","get","params","loginPage","renderGraphsDoc","map","patient","patientGraph","renderGraphsPat","dateData","xPoints","yPoints","datePoints","recovDate","push","x","y","initialDate","Date","date","forEach","element","currentDate","dateDiff","result","projectedRecoveryDate","findLineByLeastSquares","options","animationEnabled","exportEnabled","theme","title","text","axisY","includeZero","suffix","axisX","prefix","interval","type","toolTipContent","dataPoints","showInLegend","lineDashType","values_x","values_y","sum_x","sum_y","sum_xy","sum_xx","count","values_length","length","Error","v","m","b","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport Navbar from './Navbar';\r\nimport axios from 'axios';\r\nimport CanvasJSReact from './canvasjs.react';\r\n//var CanvasJSReact = require('./canvasjs.react');\r\n\r\nvar CanvasJS = CanvasJSReact.CanvasJS;\r\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\r\n\r\nclass Home extends Component {\r\n  state = {\r\n      user : \"Patient\",\r\n      patients : [\"Adil\", \"Patrice\", \"Brandy\"],\r\n      history: null,\r\n      predictionClasses: [0, 100, 12.5, 25, 37.5, 50, 62.5, 75, 87.5],\r\n      loginEmail: null,\r\n      loginPassword: null,\r\n  }\r\n\r\n\r\ncomponentDidMount() {\r\n    if (this.props.location.state.login){\r\n        this.setState({login: this.props.location.state.login})\r\n    }\r\n    else {\r\n        this.setState({login: false})\r\n    }\r\n}\r\n\r\ncomponentDidUpdate() {\r\n    axios.get('http://localhost:3001/user/history', {params: {\r\n            name: this.state.name,\r\n        }})\r\n        .then(res => this.setState({history:res.data}));\r\n}\r\n\r\nloginHandler = event => {\r\n    event.preventDefault();\r\n    axios.post('http://localhost:3001/user/login', {\r\n        email: this.state.loginEmail,\r\n        password: this.state.loginPassword\r\n    })\r\n        .then(res => {if (res.data != \"\"){\r\n            console.log(res);\r\n            this.setState({name: res.data.name,\r\n                           loginEmail: null,\r\n                           loginPassword: null,\r\n                           login: true})}\r\n                      else \r\n                          this.setState({loginStatus: \"Invalid username and password.\"})}\r\n             );\r\n}\r\n\r\nonChange = event =>{\r\n    this.setState({ [event.target.name]: event.target.value })\r\n}\r\n\r\nloginPage(){\r\n    return(\r\n        <div>\r\n            <form>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"emailAddress\">Email address</label>\r\n                    <input type=\"email\" className=\"form-control\" id=\"emailAddress\" name=\"loginEmail\" aria-describedby=\"emailHelp\" \r\n                    onChange={this.onChange}/> \r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"inputPassword\">Password</label>\r\n                    <input type=\"password\" className=\"form-control\" id=\"inputPassword\" name=\"loginPassword\" \r\n                    onChange={this.onChange}/>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\" onClick={this.loginHandler}>Submit</button>\r\n                <p>{this.state.loginStatus}</p>\r\n            </form>\r\n\r\n        </div>\r\n            \r\n    )\r\n}\r\n\r\nrenderGraphsDoc(){\r\n    if (this.state.history != null && this.state.history != 0){\r\n    return(\r\n        <div className=\"row d-flex justify-content-center text-center w-100 m-2\">{ this.state.patients.map(patient => <div className=\"col-md-5\"><CanvasJSChart options = {this.patientGraph(patient)}\r\n\t\t\t\t/* onRef={ref => this.chart = ref} */\r\n\t\t\t/>\r\n                    </div>)}</div>\r\n            )}\r\n}\r\n\r\nrenderGraphsPat(patient){\r\n    if (this.state.history != null && this.state.history != 0){\r\n        return(\r\n        <div className=\"row d-flex justify-content-center text-center w-100 m-2\">\r\n            <div className=\"col-md-5\"><CanvasJSChart options = {this.patientGraph(patient)}\r\n\t\t\t\t/* onRef={ref => this.chart = ref} */\r\n\t\t\t/>\r\n                    </div></div>\r\n        )\r\n    }\r\n    else return(\r\n        <h1>No data yet.</h1>\r\n    )\r\n}\r\n\r\npatientGraph(patient){\r\n    var dateData = this.state.history.data;\r\n    console.log(dateData);\r\n    var xPoints = [];\r\n    var yPoints = [];\r\n    var datePoints = [];\r\n    var recovDate = [];\r\n    recovDate.push({x: 0,\r\n                   y: 0})\r\n    const initialDate = new Date(dateData[0].date);\r\n    console.log(initialDate);\r\n    dateData.forEach(element => {\r\n        const currentDate = new Date(element.date);\r\n        var dateDiff = (currentDate - initialDate)/ (1000*60*60*24);\r\n        console.log(dateDiff);\r\n        xPoints.push(dateDiff);\r\n        yPoints.push(this.state.predictionClasses[element.result])\r\n        datePoints.push({x: dateDiff,\r\n                        y: this.state.predictionClasses[element.result]})\r\n    })\r\n    console.log(datePoints);\r\n    \r\n    const projectedRecoveryDate = this.findLineByLeastSquares(xPoints, yPoints);\r\n    \r\n    recovDate.push({x: projectedRecoveryDate,\r\n                     y: 90,\r\n//                     markerColor: \"red\",\r\n//                     markerType: \"triangle\",\r\n//                     indexLabel: \"Projected recovery date\",\r\n//                     indexLabelOrientation: \"vertical\"\r\n                    });\r\n    \r\n    const options = {\r\n\t\t\tanimationEnabled: true,\r\n\t\t\texportEnabled: true,\r\n\t\t\ttheme: \"light2\", // \"light1\", \"dark1\", \"dark2\"\r\n\t\t\ttitle:{\r\n\t\t\t\ttext: patient\r\n\t\t\t},\r\n\t\t\taxisY: {\r\n\t\t\t\ttitle: \"Recovery Rate\",\r\n\t\t\t\tincludeZero: false,\r\n\t\t\t\tsuffix: \"%\"\r\n\t\t\t},\r\n\t\t\taxisX: {\r\n\t\t\t\ttitle: \"Days since start\",\r\n\t\t\t\tprefix: \"D\",\r\n\t\t\t\tinterval: 2\r\n\t\t\t},\r\n\t\t\tdata: [{\r\n\t\t\t\ttype: \"spline\",\r\n                name: \"Recovery timeline\",\r\n\t\t\t\ttoolTipContent: \"Day {x}: {y}%\",\r\n\t\t\t\tdataPoints: datePoints,\r\n                showInLegend: true\r\n\t\t\t},\r\n                  {\r\n\t\t\t\ttype: \"line\",\r\n                      name: \"Projected recovery\",\r\n\t\t\t\ttoolTipContent: \"Day {x}: {y}%\",\r\n                lineDashType: \"dash\",\r\n\t\t\t\tdataPoints: recovDate,\r\n                      showInLegend: true\r\n\t\t\t}]\r\n\t\t}\r\n    \r\n    return options\r\n}\r\n\r\nfindLineByLeastSquares(values_x, values_y) {\r\n    var sum_x = 0;\r\n    var sum_y = 0;\r\n    var sum_xy = 0;\r\n    var sum_xx = 0;\r\n    var count = 0;\r\n\r\n    /*\r\n     * We'll use those variables for faster read/write access.\r\n     */\r\n    var x = 0;\r\n    var y = 0;\r\n    var values_length = values_x.length;\r\n\r\n    if (values_length != values_y.length) {\r\n        throw new Error('The parameters values_x and values_y need to have same size!');\r\n    }\r\n\r\n    /*\r\n     * Nothing to do.\r\n     */\r\n    if (values_length === 0) {\r\n        return [ [], [] ];\r\n    }\r\n\r\n    /*\r\n     * Calculate the sum for each of the parts necessary.\r\n     */\r\n    for (var v = 0; v < values_length; v++) {\r\n        x = values_x[v];\r\n        y = values_y[v];\r\n        sum_x += x;\r\n        sum_y += y;\r\n        sum_xx += x*x;\r\n        sum_xy += x*y;\r\n        count++;\r\n    }\r\n\r\n    /*\r\n     * Calculate m and b for the formular:\r\n     * y = x * m + b\r\n     * x = (y - b) / m\r\n     */\r\n    var m = (count*sum_xy - sum_x*sum_y) / (count*sum_xx - sum_x*sum_x);\r\n    var b = (sum_y/count) - (m*sum_x)/count;\r\n    \r\n    return (90 - b) / m; \r\n\r\n    /*\r\n     * We will make the x and y result line now\r\n     */\r\n//    var result_values_x = [];\r\n//    var result_values_y = [];\r\n//\r\n//    for (var v = 0; v &lt; values_length; v++) {\r\n//        x = values_x[v];\r\n//        y = x * m + b;\r\n//        result_values_x.push(x);\r\n//        result_values_y.push(y);\r\n//    }\r\n//\r\n//    return [result_values_x, result_values_y];\r\n}\r\n\r\n\r\n  render() {\r\n      if (this.state.login != true){\r\n          return(<div>\r\n                  <Navbar user=\"Login\"/>\r\n                  {this.loginPage()}\r\n                  </div>\r\n          )\r\n      }\r\n      if (this.state.login == true && this.state.user == \"Patient\"){\r\n    return (\r\n        <div>\r\n            <Navbar user={this.state.user} login={this.state.login}               \r\n                />\r\n            <div className=\"container-fluid d-flex align-items-center justify-content-center h-100\">\r\n                {this.renderGraphsPat(this.state.name)}\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n    );}\r\n      else if (this.state.login == true && this.state.user == \"Doctor\"){\r\n          return (\r\n        <div>\r\n            <Navbar user=\"Doctor\"  login={this.state.login}               \r\n                />\r\n            <div className=\"container-fluid d-flex align-items-center justify-content-center h-100\">\r\n                {this.renderGraphsDoc()}\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n    );\r\n      }\r\n  }\r\n}\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}