{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AdilAzmoon\\\\Desktop\\\\Mini Projects\\\\FYP\\\\FYP_2020\\\\MERN\\\\final-year-project\\\\src\\\\components\\\\Doctor.jsx\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport axios from 'axios';\nimport CanvasJSReact from './canvasjs.react'; //var CanvasJSReact = require('./canvasjs.react');\n\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nclass Doctor extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: this.props.location.state.user,\n      login: this.props.location.state.login,\n      patients: this.props.location.state.patients,\n      patientData: []\n    };\n  }\n\n  componentDidMount() {\n    var patientData = [];\n    console.log(patientData); //    for (var i = 0; i < this.state.patients.length; i++){\n    //        console.log(this.state.patients[i]);\n    //        axios.get('http://localhost:3001/user/history', {params: {\n    //            name: this.state.patients[i],\n    //        }}).then(res => patientData[this.state.patients[i]] = res.data.data);\n    //        console.log(patientData);\n    //    }\n\n    this.state.patients.forEach(patient => axios.get('http://localhost:3001/user/history', {\n      params: {\n        name: patient\n      }\n    }).then(res => patientData.push({\n      name: patient,\n      data: res.data.data\n    })));\n    console.log(patientData);\n    this.setState({\n      patientData: patientData\n    });\n    console.log(this.state.patientData);\n  }\n\n  patientGraph(patient) {\n    console.log(patient);\n\n    if (this.state.patientData != null) {\n      //    console.log(this.state);\n      //    console.log(this.state.patientData);\n      //        var temp = this.state.patientData;\n      //        console.log(temp);\n      //        console.log(temp.Adil);\n      //    console.log(this.state.patientData.Adil);\n      //    console.log(this.state.patients);\n      var dateData = this.state.patientData.Adil;\n      console.log(dateData);\n      var xPoints = [];\n      var yPoints = [];\n      var datePoints = [];\n      var recovDate = [];\n      recovDate.push({\n        x: 0,\n        y: 0\n      });\n      const initialDate = new Date(dateData[0].date);\n      console.log(initialDate);\n      dateData.forEach(element => {\n        const currentDate = new Date(element.date);\n        var dateDiff = (currentDate - initialDate) / (1000 * 60 * 60 * 24);\n        console.log(dateDiff);\n        xPoints.push(dateDiff);\n        yPoints.push(this.state.predictionClasses[element.result]);\n        datePoints.push({\n          x: dateDiff,\n          y: this.state.predictionClasses[element.result]\n        });\n      });\n      console.log(datePoints);\n      const projectedRecoveryDate = this.findLineByLeastSquares(xPoints, yPoints);\n      recovDate.push({\n        x: projectedRecoveryDate,\n        y: 90 //                     markerColor: \"red\",\n        //                     markerType: \"triangle\",\n        //                     indexLabel: \"Projected recovery date\",\n        //                     indexLabelOrientation: \"vertical\"\n\n      });\n      const options = {\n        animationEnabled: true,\n        exportEnabled: true,\n        theme: \"light2\",\n        // \"light1\", \"dark1\", \"dark2\"\n        title: {\n          text: patient\n        },\n        axisY: {\n          title: \"Recovery Rate\",\n          includeZero: false,\n          suffix: \"%\"\n        },\n        axisX: {\n          title: \"Days since start\",\n          prefix: \"D\",\n          interval: 2\n        },\n        data: [{\n          type: \"spline\",\n          name: \"Recovery timeline\",\n          toolTipContent: \"Day {x}: {y}%\",\n          dataPoints: datePoints,\n          showInLegend: true\n        }, {\n          type: \"line\",\n          name: \"Projected recovery\",\n          toolTipContent: \"Day {x}: {y}%\",\n          lineDashType: \"dash\",\n          dataPoints: recovDate,\n          showInLegend: true\n        }]\n      };\n      return options;\n    }\n  }\n\n  findLineByLeastSquares(values_x, values_y) {\n    var sum_x = 0;\n    var sum_y = 0;\n    var sum_xy = 0;\n    var sum_xx = 0;\n    var count = 0;\n    /*\r\n     * We'll use those variables for faster read/write access.\r\n     */\n\n    var x = 0;\n    var y = 0;\n    var values_length = values_x.length;\n\n    if (values_length != values_y.length) {\n      throw new Error('The parameters values_x and values_y need to have same size!');\n    }\n    /*\r\n     * Nothing to do.\r\n     */\n\n\n    if (values_length === 0) {\n      return [[], []];\n    }\n    /*\r\n     * Calculate the sum for each of the parts necessary.\r\n     */\n\n\n    for (var v = 0; v < values_length; v++) {\n      x = values_x[v];\n      y = values_y[v];\n      sum_x += x;\n      sum_y += y;\n      sum_xx += x * x;\n      sum_xy += x * y;\n      count++;\n    }\n    /*\r\n     * Calculate m and b for the formular:\r\n     * y = x * m + b\r\n     * x = (y - b) / m\r\n     */\n\n\n    var m = (count * sum_xy - sum_x * sum_y) / (count * sum_xx - sum_x * sum_x);\n    var b = sum_y / count - m * sum_x / count;\n    return (90 - b) / m;\n    /*\r\n     * We will make the x and y result line now\r\n     */\n    //    var result_values_x = [];\n    //    var result_values_y = [];\n    //\n    //    for (var v = 0; v &lt; values_length; v++) {\n    //        x = values_x[v];\n    //        y = x * m + b;\n    //        result_values_x.push(x);\n    //        result_values_y.push(y);\n    //    }\n    //\n    //    return [result_values_x, result_values_y];\n  }\n\n  renderGraphs() {\n    return React.createElement(\"div\", {\n      className: \"row d-flex justify-content-center text-center w-100 m-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, this.state.patients.map(patient => React.createElement(\"div\", {\n      className: \"col-md-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(CanvasJSChart, {\n      options: this.patientGraph(patient)\n      /* onRef={ref => this.chart = ref} */\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }))));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      name: this.state.name,\n      user: this.state.user,\n      login: this.state.login,\n      patients: this.state.patients,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container-fluid d-flex align-items-center justify-content-center h-100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, this.renderGraphs()));\n  }\n\n}\n\nexport default Doctor;","map":{"version":3,"sources":["C:/Users/AdilAzmoon/Desktop/Mini Projects/FYP/FYP_2020/MERN/final-year-project/src/components/Doctor.jsx"],"names":["React","Component","BrowserRouter","Router","Switch","Route","Link","Navbar","axios","CanvasJSReact","CanvasJS","CanvasJSChart","Doctor","state","user","props","location","login","patients","patientData","componentDidMount","console","log","forEach","patient","get","params","name","then","res","push","data","setState","patientGraph","dateData","Adil","xPoints","yPoints","datePoints","recovDate","x","y","initialDate","Date","date","element","currentDate","dateDiff","predictionClasses","result","projectedRecoveryDate","findLineByLeastSquares","options","animationEnabled","exportEnabled","theme","title","text","axisY","includeZero","suffix","axisX","prefix","interval","type","toolTipContent","dataPoints","showInLegend","lineDashType","values_x","values_y","sum_x","sum_y","sum_xy","sum_xx","count","values_length","length","Error","v","m","b","renderGraphs","map","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport Navbar from './Navbar';\r\nimport axios from 'axios';\r\nimport CanvasJSReact from './canvasjs.react';\r\n//var CanvasJSReact = require('./canvasjs.react');\r\n\r\nvar CanvasJS = CanvasJSReact.CanvasJS;\r\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\r\n\r\nclass Doctor extends Component {\r\n  state = {\r\n      user: this.props.location.state.user,\r\n      login: this.props.location.state.login,\r\n      patients : this.props.location.state.patients,\r\n      patientData: [],\r\n      \r\n  }\r\n\r\ncomponentDidMount() {\r\n    var patientData = [];\r\n    console.log(patientData);\r\n\r\n    \r\n//    for (var i = 0; i < this.state.patients.length; i++){\r\n//        console.log(this.state.patients[i]);\r\n//        axios.get('http://localhost:3001/user/history', {params: {\r\n//            name: this.state.patients[i],\r\n//        }}).then(res => patientData[this.state.patients[i]] = res.data.data);\r\n//        console.log(patientData);\r\n//    }\r\n    \r\n    this.state.patients.forEach(patient => \r\n                               axios.get('http://localhost:3001/user/history', {params: {\r\n            name: patient,\r\n        }})\r\n            .then(res => patientData.push({name: patient,\r\n                                          data: res.data.data})));\r\n    \r\n    console.log(patientData);\r\n    this.setState({patientData: patientData});\r\n    console.log(this.state.patientData);\r\n}\r\n\r\n\r\n\r\npatientGraph(patient){\r\n    console.log(patient);\r\n    if (this.state.patientData != null){\r\n//    console.log(this.state);\r\n//    console.log(this.state.patientData);\r\n//        var temp = this.state.patientData;\r\n//        console.log(temp);\r\n//        console.log(temp.Adil);\r\n//    console.log(this.state.patientData.Adil);\r\n//    console.log(this.state.patients);\r\n    var dateData = this.state.patientData.Adil;\r\n    console.log(dateData);\r\n    var xPoints = [];\r\n    var yPoints = [];\r\n    var datePoints = [];\r\n    var recovDate = [];\r\n    recovDate.push({x: 0,\r\n                   y: 0})\r\n    const initialDate = new Date(dateData[0].date);\r\n    console.log(initialDate);\r\n    dateData.forEach(element => {\r\n        const currentDate = new Date(element.date);\r\n        var dateDiff = (currentDate - initialDate)/ (1000*60*60*24);\r\n        console.log(dateDiff);\r\n        xPoints.push(dateDiff);\r\n        yPoints.push(this.state.predictionClasses[element.result])\r\n        datePoints.push({x: dateDiff,\r\n                        y: this.state.predictionClasses[element.result]})\r\n    })\r\n    console.log(datePoints);\r\n    \r\n    const projectedRecoveryDate = this.findLineByLeastSquares(xPoints, yPoints);\r\n    \r\n    recovDate.push({x: projectedRecoveryDate,\r\n                     y: 90,\r\n//                     markerColor: \"red\",\r\n//                     markerType: \"triangle\",\r\n//                     indexLabel: \"Projected recovery date\",\r\n//                     indexLabelOrientation: \"vertical\"\r\n                    });\r\n    \r\n    const options = {\r\n\t\t\tanimationEnabled: true,\r\n\t\t\texportEnabled: true,\r\n\t\t\ttheme: \"light2\", // \"light1\", \"dark1\", \"dark2\"\r\n\t\t\ttitle:{\r\n\t\t\t\ttext: patient\r\n\t\t\t},\r\n\t\t\taxisY: {\r\n\t\t\t\ttitle: \"Recovery Rate\",\r\n\t\t\t\tincludeZero: false,\r\n\t\t\t\tsuffix: \"%\"\r\n\t\t\t},\r\n\t\t\taxisX: {\r\n\t\t\t\ttitle: \"Days since start\",\r\n\t\t\t\tprefix: \"D\",\r\n\t\t\t\tinterval: 2\r\n\t\t\t},\r\n\t\t\tdata: [{\r\n\t\t\t\ttype: \"spline\",\r\n                name: \"Recovery timeline\",\r\n\t\t\t\ttoolTipContent: \"Day {x}: {y}%\",\r\n\t\t\t\tdataPoints: datePoints,\r\n                showInLegend: true\r\n\t\t\t},\r\n                  {\r\n\t\t\t\ttype: \"line\",\r\n                      name: \"Projected recovery\",\r\n\t\t\t\ttoolTipContent: \"Day {x}: {y}%\",\r\n                lineDashType: \"dash\",\r\n\t\t\t\tdataPoints: recovDate,\r\n                      showInLegend: true\r\n\t\t\t}]\r\n\t\t}\r\n    \r\n    return options}\r\n}\r\n\r\nfindLineByLeastSquares(values_x, values_y) {\r\n    var sum_x = 0;\r\n    var sum_y = 0;\r\n    var sum_xy = 0;\r\n    var sum_xx = 0;\r\n    var count = 0;\r\n\r\n    /*\r\n     * We'll use those variables for faster read/write access.\r\n     */\r\n    var x = 0;\r\n    var y = 0;\r\n    var values_length = values_x.length;\r\n\r\n    if (values_length != values_y.length) {\r\n        throw new Error('The parameters values_x and values_y need to have same size!');\r\n    }\r\n\r\n    /*\r\n     * Nothing to do.\r\n     */\r\n    if (values_length === 0) {\r\n        return [ [], [] ];\r\n    }\r\n\r\n    /*\r\n     * Calculate the sum for each of the parts necessary.\r\n     */\r\n    for (var v = 0; v < values_length; v++) {\r\n        x = values_x[v];\r\n        y = values_y[v];\r\n        sum_x += x;\r\n        sum_y += y;\r\n        sum_xx += x*x;\r\n        sum_xy += x*y;\r\n        count++;\r\n    }\r\n\r\n    /*\r\n     * Calculate m and b for the formular:\r\n     * y = x * m + b\r\n     * x = (y - b) / m\r\n     */\r\n    var m = (count*sum_xy - sum_x*sum_y) / (count*sum_xx - sum_x*sum_x);\r\n    var b = (sum_y/count) - (m*sum_x)/count;\r\n    \r\n    return (90 - b) / m; \r\n\r\n    /*\r\n     * We will make the x and y result line now\r\n     */\r\n//    var result_values_x = [];\r\n//    var result_values_y = [];\r\n//\r\n//    for (var v = 0; v &lt; values_length; v++) {\r\n//        x = values_x[v];\r\n//        y = x * m + b;\r\n//        result_values_x.push(x);\r\n//        result_values_y.push(y);\r\n//    }\r\n//\r\n//    return [result_values_x, result_values_y];\r\n}\r\n\r\nrenderGraphs(){    \r\n    return(\r\n        <div className=\"row d-flex justify-content-center text-center w-100 m-2\">{ this.state.patients.map(patient => <div className=\"col-md-5\"><CanvasJSChart options = {this.patientGraph(patient)}\r\n\t\t\t\t/* onRef={ref => this.chart = ref} */\r\n\t\t\t/>\r\n                    </div>)}</div>\r\n            )\r\n}\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n            <Navbar name= {this.state.name} user={this.state.user} login={this.state.login} patients= {this.state.patients}               \r\n                />\r\n            <div className=\"container-fluid d-flex align-items-center justify-content-center h-100\">\r\n                {this.renderGraphs()}\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n    );\r\n  }\r\n}\r\n\r\nexport default Doctor;\r\n"]},"metadata":{},"sourceType":"module"}