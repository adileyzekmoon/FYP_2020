{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AdilAzmoon\\\\Desktop\\\\Mini Projects\\\\FYP\\\\FYP_2020\\\\MERN\\\\final-year-project\\\\src\\\\components\\\\History.jsx\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport axios from 'axios';\nimport CanvasJSReact from './canvasjs.react';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nclass History extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: this.props.location.state.user,\n      name: this.props.location.state.name,\n      patientData: this.props.location.state.patientData,\n      history: [{\n        date: null,\n        result: null\n      }],\n      login: this.props.location.state.login,\n      predictionClasses: [0, 100, 12.5, 25, 37.5, 50, 62.5, 75, 87.5]\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:3001/user/history', {\n      params: {\n        name: this.state.name\n      }\n    }).then(res => this.setState({\n      history: res.data.data\n    }));\n  }\n\n  dataMap() {\n    if (this.state.history != \"\") {\n      return React.createElement(\"div\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, this.state.history.map(data => React.createElement(\"p\", {\n        key: data.date,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, data.date)));\n    }\n  }\n\n  renderGraphsDoc() {\n    if (this.state.history != null && this.state.history != 0) {\n      return React.createElement(\"div\", {\n        className: \"row d-flex justify-content-center text-center w-100 m-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, this.state.patients.map(patient => React.createElement(\"div\", {\n        className: \"col-md-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(CanvasJSChart, {\n        options: this.patientGraph(patient)\n        /* onRef={ref => this.chart = ref} */\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }))));\n    }\n  }\n\n  renderGraphsPat(patient) {\n    if (this.state.history != null && this.state.history != 0) {\n      return React.createElement(\"div\", {\n        className: \"row d-flex justify-content-center text-center w-100 m-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(CanvasJSChart, {\n        options: this.patientGraph(patient)\n        /* onRef={ref => this.chart = ref} */\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      })));\n    } else return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"No data yet.\");\n  }\n\n  patientGraph(patient) {\n    var dateData = this.state.patientData;\n    console.log(dateData);\n    var xPoints = [];\n    var yPoints = [];\n    var datePoints = [];\n    var recovDate = [];\n    recovDate.push({\n      x: 0,\n      y: 0\n    });\n    const initialDate = new Date(dateData[0].date);\n    console.log(initialDate);\n    dateData.forEach(element => {\n      const currentDate = new Date(element.date);\n      var dateDiff = (currentDate - initialDate) / (1000 * 60 * 60 * 24);\n      console.log(dateDiff);\n      xPoints.push(dateDiff);\n      yPoints.push(this.state.predictionClasses[element.result]);\n      datePoints.push({\n        x: dateDiff,\n        y: this.state.predictionClasses[element.result]\n      });\n    });\n    console.log(datePoints);\n    const projectedRecoveryDate = this.findLineByLeastSquares(xPoints, yPoints);\n    recovDate.push({\n      x: projectedRecoveryDate,\n      y: 90 //                     markerColor: \"red\",\n      //                     markerType: \"triangle\",\n      //                     indexLabel: \"Projected recovery date\",\n      //                     indexLabelOrientation: \"vertical\"\n\n    });\n    const options = {\n      animationEnabled: true,\n      exportEnabled: true,\n      theme: \"light2\",\n      // \"light1\", \"dark1\", \"dark2\"\n      title: {\n        text: patient\n      },\n      axisY: {\n        title: \"Recovery Rate\",\n        includeZero: false,\n        suffix: \"%\"\n      },\n      axisX: {\n        title: \"Days since start\",\n        prefix: \"D\",\n        interval: 2\n      },\n      data: [{\n        type: \"spline\",\n        name: \"Recovery timeline\",\n        toolTipContent: \"Day {x}: {y}%\",\n        dataPoints: datePoints,\n        showInLegend: true\n      }, {\n        type: \"line\",\n        name: \"Projected recovery\",\n        toolTipContent: \"Day {x}: {y}%\",\n        lineDashType: \"dash\",\n        dataPoints: recovDate,\n        showInLegend: true\n      }]\n    };\n    return options;\n  }\n\n  findLineByLeastSquares(values_x, values_y) {\n    var sum_x = 0;\n    var sum_y = 0;\n    var sum_xy = 0;\n    var sum_xx = 0;\n    var count = 0;\n    /*\r\n     * We'll use those variables for faster read/write access.\r\n     */\n\n    var x = 0;\n    var y = 0;\n    var values_length = values_x.length;\n\n    if (values_length != values_y.length) {\n      throw new Error('The parameters values_x and values_y need to have same size!');\n    }\n    /*\r\n     * Nothing to do.\r\n     */\n\n\n    if (values_length === 0) {\n      return [[], []];\n    }\n    /*\r\n     * Calculate the sum for each of the parts necessary.\r\n     */\n\n\n    for (var v = 0; v < values_length; v++) {\n      x = values_x[v];\n      y = values_y[v];\n      sum_x += x;\n      sum_y += y;\n      sum_xx += x * x;\n      sum_xy += x * y;\n      count++;\n    }\n    /*\r\n     * Calculate m and b for the formular:\r\n     * y = x * m + b\r\n     * x = (y - b) / m\r\n     */\n\n\n    var m = (count * sum_xy - sum_x * sum_y) / (count * sum_xx - sum_x * sum_x);\n    var b = sum_y / count - m * sum_x / count;\n    return (90 - b) / m;\n    /*\r\n     * We will make the x and y result line now\r\n     */\n    //    var result_values_x = [];\n    //    var result_values_y = [];\n    //\n    //    for (var v = 0; v &lt; values_length; v++) {\n    //        x = values_x[v];\n    //        y = x * m + b;\n    //        result_values_x.push(x);\n    //        result_values_y.push(y);\n    //    }\n    //\n    //    return [result_values_x, result_values_y];\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      name: this.state.name,\n      user: this.props.location.state.user,\n      login: this.state.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container-fluid d-flex align-items-center justify-content-center h-100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, this.renderGraphsPat(this.state.name)), React.createElement(\"div\", {\n      className: \"container-fluid d-flex align-items-center justify-content-center h-100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, this.dataMap())));\n  }\n\n}\n\nexport default History;","map":{"version":3,"sources":["C:/Users/AdilAzmoon/Desktop/Mini Projects/FYP/FYP_2020/MERN/final-year-project/src/components/History.jsx"],"names":["React","Component","BrowserRouter","Router","Switch","Route","Link","Navbar","axios","CanvasJSReact","CanvasJS","CanvasJSChart","History","state","user","props","location","name","patientData","history","date","result","login","predictionClasses","componentDidMount","get","params","then","res","setState","data","dataMap","map","renderGraphsDoc","patients","patient","patientGraph","renderGraphsPat","dateData","console","log","xPoints","yPoints","datePoints","recovDate","push","x","y","initialDate","Date","forEach","element","currentDate","dateDiff","projectedRecoveryDate","findLineByLeastSquares","options","animationEnabled","exportEnabled","theme","title","text","axisY","includeZero","suffix","axisX","prefix","interval","type","toolTipContent","dataPoints","showInLegend","lineDashType","values_x","values_y","sum_x","sum_y","sum_xy","sum_xx","count","values_length","length","Error","v","m","b","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,EAAiDC,IAAjD,QAA6D,kBAA7D;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AAEA,IAAIC,QAAQ,GAAGD,aAAa,CAACC,QAA7B;AACA,IAAIC,aAAa,GAAGF,aAAa,CAACE,aAAlC;;AAEA,MAAMC,OAAN,SAAsBX,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BY,KAD8B,GACtB;AACJC,MAAAA,IAAI,EAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBH,KAApB,CAA0BC,IAD7B;AAEJG,MAAAA,IAAI,EAAG,KAAKF,KAAL,CAAWC,QAAX,CAAoBH,KAApB,CAA0BI,IAF7B;AAGJC,MAAAA,WAAW,EAAG,KAAKH,KAAL,CAAWC,QAAX,CAAoBH,KAApB,CAA0BK,WAHpC;AAIJC,MAAAA,OAAO,EAAE,CAAC;AAACC,QAAAA,IAAI,EAAC,IAAN;AAAYC,QAAAA,MAAM,EAAE;AAApB,OAAD,CAJL;AAKJC,MAAAA,KAAK,EAAE,KAAKP,KAAL,CAAWC,QAAX,CAAoBH,KAApB,CAA0BS,KAL7B;AAMJC,MAAAA,iBAAiB,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,IAAT,EAAe,EAAf,EAAmB,IAAnB,EAAyB,EAAzB,EAA6B,IAA7B,EAAmC,EAAnC,EAAuC,IAAvC;AANf,KADsB;AAAA;;AAUhCC,EAAAA,iBAAiB,GAAG;AAChBhB,IAAAA,KAAK,CAACiB,GAAN,CAAU,oCAAV,EAAgD;AAACC,MAAAA,MAAM,EAAE;AACjDT,QAAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWI;AADgC;AAAT,KAAhD,EAGSU,IAHT,CAGcC,GAAG,IAAI,KAAKC,QAAL,CAAc;AAACV,MAAAA,OAAO,EAACS,GAAG,CAACE,IAAJ,CAASA;AAAlB,KAAd,CAHrB;AAIH;;AAEDC,EAAAA,OAAO,GAAE;AACL,QAAI,KAAKlB,KAAL,CAAWM,OAAX,IAAsB,EAA1B,EAA6B;AACzB,aACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKN,KAAL,CAAWM,OAAX,CAAmBa,GAAnB,CAAuBF,IAAI,IAAI;AAAG,QAAA,GAAG,EAAEA,IAAI,CAACV,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoBU,IAAI,CAACV,IAAzB,CAA/B,CADL,CADJ;AAIH;AACJ;;AAEDa,EAAAA,eAAe,GAAE;AACb,QAAI,KAAKpB,KAAL,CAAWM,OAAX,IAAsB,IAAtB,IAA8B,KAAKN,KAAL,CAAWM,OAAX,IAAsB,CAAxD,EAA0D;AAC1D,aACI;AAAK,QAAA,SAAS,EAAC,yDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2E,KAAKN,KAAL,CAAWqB,QAAX,CAAoBF,GAApB,CAAwBG,OAAO,IAAI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0B,oBAAC,aAAD;AAAe,QAAA,OAAO,EAAI,KAAKC,YAAL,CAAkBD,OAAlB;AACtK;AAD4I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA1B,CAAnC,CAA3E,CADJ;AAKU;AACb;;AAEDE,EAAAA,eAAe,CAACF,OAAD,EAAS;AACpB,QAAI,KAAKtB,KAAL,CAAWM,OAAX,IAAsB,IAAtB,IAA8B,KAAKN,KAAL,CAAWM,OAAX,IAAsB,CAAxD,EAA0D;AACtD,aACA;AAAK,QAAA,SAAS,EAAC,yDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0B,oBAAC,aAAD;AAAe,QAAA,OAAO,EAAI,KAAKiB,YAAL,CAAkBD,OAAlB;AAC5D;AADkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA1B,CADJ,CADA;AAOH,KARD,MASK,OACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADC;AAGR;;AAEDC,EAAAA,YAAY,CAACD,OAAD,EAAS;AACjB,QAAIG,QAAQ,GAAG,KAAKzB,KAAL,CAAWK,WAA1B;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,QAAIG,OAAO,GAAG,EAAd;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,SAAS,GAAG,EAAhB;AACAA,IAAAA,SAAS,CAACC,IAAV,CAAe;AAACC,MAAAA,CAAC,EAAE,CAAJ;AACAC,MAAAA,CAAC,EAAE;AADH,KAAf;AAEA,UAAMC,WAAW,GAAG,IAAIC,IAAJ,CAASX,QAAQ,CAAC,CAAD,CAAR,CAAYlB,IAArB,CAApB;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAYQ,WAAZ;AACAV,IAAAA,QAAQ,CAACY,OAAT,CAAiBC,OAAO,IAAI;AACxB,YAAMC,WAAW,GAAG,IAAIH,IAAJ,CAASE,OAAO,CAAC/B,IAAjB,CAApB;AACA,UAAIiC,QAAQ,GAAG,CAACD,WAAW,GAAGJ,WAAf,KAA8B,OAAK,EAAL,GAAQ,EAAR,GAAW,EAAzC,CAAf;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYa,QAAZ;AACAZ,MAAAA,OAAO,CAACI,IAAR,CAAaQ,QAAb;AACAX,MAAAA,OAAO,CAACG,IAAR,CAAa,KAAKhC,KAAL,CAAWU,iBAAX,CAA6B4B,OAAO,CAAC9B,MAArC,CAAb;AACAsB,MAAAA,UAAU,CAACE,IAAX,CAAgB;AAACC,QAAAA,CAAC,EAAEO,QAAJ;AACAN,QAAAA,CAAC,EAAE,KAAKlC,KAAL,CAAWU,iBAAX,CAA6B4B,OAAO,CAAC9B,MAArC;AADH,OAAhB;AAEH,KARD;AASAkB,IAAAA,OAAO,CAACC,GAAR,CAAYG,UAAZ;AAEA,UAAMW,qBAAqB,GAAG,KAAKC,sBAAL,CAA4Bd,OAA5B,EAAqCC,OAArC,CAA9B;AAEAE,IAAAA,SAAS,CAACC,IAAV,CAAe;AAACC,MAAAA,CAAC,EAAEQ,qBAAJ;AACEP,MAAAA,CAAC,EAAE,EADL,CAEnB;AACA;AACA;AACA;;AALmB,KAAf;AAQA,UAAMS,OAAO,GAAG;AACjBC,MAAAA,gBAAgB,EAAE,IADD;AAEjBC,MAAAA,aAAa,EAAE,IAFE;AAGjBC,MAAAA,KAAK,EAAE,QAHU;AAGA;AACjBC,MAAAA,KAAK,EAAC;AACLC,QAAAA,IAAI,EAAE1B;AADD,OAJW;AAOjB2B,MAAAA,KAAK,EAAE;AACNF,QAAAA,KAAK,EAAE,eADD;AAENG,QAAAA,WAAW,EAAE,KAFP;AAGNC,QAAAA,MAAM,EAAE;AAHF,OAPU;AAYjBC,MAAAA,KAAK,EAAE;AACNL,QAAAA,KAAK,EAAE,kBADD;AAENM,QAAAA,MAAM,EAAE,GAFF;AAGNC,QAAAA,QAAQ,EAAE;AAHJ,OAZU;AAiBjBrC,MAAAA,IAAI,EAAE,CAAC;AACNsC,QAAAA,IAAI,EAAE,QADA;AAEMnD,QAAAA,IAAI,EAAE,mBAFZ;AAGNoD,QAAAA,cAAc,EAAE,eAHV;AAINC,QAAAA,UAAU,EAAE3B,UAJN;AAKM4B,QAAAA,YAAY,EAAE;AALpB,OAAD,EAOS;AACdH,QAAAA,IAAI,EAAE,MADQ;AAEInD,QAAAA,IAAI,EAAE,oBAFV;AAGdoD,QAAAA,cAAc,EAAE,eAHF;AAIFG,QAAAA,YAAY,EAAE,MAJZ;AAKdF,QAAAA,UAAU,EAAE1B,SALE;AAMI2B,QAAAA,YAAY,EAAE;AANlB,OAPT;AAjBW,KAAhB;AAkCA,WAAOf,OAAP;AACH;;AAEDD,EAAAA,sBAAsB,CAACkB,QAAD,EAAWC,QAAX,EAAqB;AACvC,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,MAAM,GAAG,CAAb;AACA,QAAIC,MAAM,GAAG,CAAb;AACA,QAAIC,KAAK,GAAG,CAAZ;AAEA;;;;AAGA,QAAIjC,CAAC,GAAG,CAAR;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIiC,aAAa,GAAGP,QAAQ,CAACQ,MAA7B;;AAEA,QAAID,aAAa,IAAIN,QAAQ,CAACO,MAA9B,EAAsC;AAClC,YAAM,IAAIC,KAAJ,CAAU,8DAAV,CAAN;AACH;AAED;;;;;AAGA,QAAIF,aAAa,KAAK,CAAtB,EAAyB;AACrB,aAAO,CAAE,EAAF,EAAM,EAAN,CAAP;AACH;AAED;;;;;AAGA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,aAApB,EAAmCG,CAAC,EAApC,EAAwC;AACpCrC,MAAAA,CAAC,GAAG2B,QAAQ,CAACU,CAAD,CAAZ;AACApC,MAAAA,CAAC,GAAG2B,QAAQ,CAACS,CAAD,CAAZ;AACAR,MAAAA,KAAK,IAAI7B,CAAT;AACA8B,MAAAA,KAAK,IAAI7B,CAAT;AACA+B,MAAAA,MAAM,IAAIhC,CAAC,GAACA,CAAZ;AACA+B,MAAAA,MAAM,IAAI/B,CAAC,GAACC,CAAZ;AACAgC,MAAAA,KAAK;AACR;AAED;;;;;;;AAKA,QAAIK,CAAC,GAAG,CAACL,KAAK,GAACF,MAAN,GAAeF,KAAK,GAACC,KAAtB,KAAgCG,KAAK,GAACD,MAAN,GAAeH,KAAK,GAACA,KAArD,CAAR;AACA,QAAIU,CAAC,GAAIT,KAAK,GAACG,KAAP,GAAiBK,CAAC,GAACT,KAAH,GAAUI,KAAlC;AAEA,WAAO,CAAC,KAAKM,CAAN,IAAWD,CAAlB;AAEA;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;;AAMCE,EAAAA,MAAM,GAAG;AACP,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAG,KAAKzE,KAAL,CAAWI,IAA1B;AAAgC,MAAA,IAAI,EAAE,KAAKF,KAAL,CAAWC,QAAX,CAAoBH,KAApB,CAA0BC,IAAhE;AAAsE,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWS,KAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGI;AAAK,MAAA,SAAS,EAAC,wEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKe,eAAL,CAAqB,KAAKxB,KAAL,CAAWI,IAAhC,CADL,CAHJ,EAOI;AAAK,MAAA,SAAS,EAAC,wEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACS,KAAKc,OAAL,EADT,CADN,CAPJ,CADJ;AAkBD;;AA/M6B;;AAkNhC,eAAenB,OAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport Navbar from './Navbar';\r\nimport axios from 'axios';\r\nimport CanvasJSReact from './canvasjs.react';\r\n\r\nvar CanvasJS = CanvasJSReact.CanvasJS;\r\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\r\n\r\nclass History extends Component {\r\n  state = {\r\n      user : this.props.location.state.user,\r\n      name : this.props.location.state.name,\r\n      patientData : this.props.location.state.patientData,\r\n      history: [{date:null, result: null}],\r\n      login: this.props.location.state.login,\r\n      predictionClasses: [0, 100, 12.5, 25, 37.5, 50, 62.5, 75, 87.5],\r\n  }\r\n\r\ncomponentDidMount() {\r\n    axios.get('http://localhost:3001/user/history', {params: {\r\n            name: this.state.name,\r\n        }})\r\n            .then(res => this.setState({history:res.data.data}));\r\n}\r\n\r\ndataMap(){\r\n    if (this.state.history != \"\"){\r\n        return(\r\n            <div className=\"col\">\r\n                {this.state.history.map(data => <p key={data.date}>{data.date}</p>)}\r\n            </div>)\r\n    }\r\n}\r\n\r\nrenderGraphsDoc(){\r\n    if (this.state.history != null && this.state.history != 0){\r\n    return(\r\n        <div className=\"row d-flex justify-content-center text-center w-100 m-2\">{ this.state.patients.map(patient => <div className=\"col-md-5\"><CanvasJSChart options = {this.patientGraph(patient)}\r\n\t\t\t\t/* onRef={ref => this.chart = ref} */\r\n\t\t\t/>\r\n                    </div>)}</div>\r\n            )}\r\n}\r\n\r\nrenderGraphsPat(patient){\r\n    if (this.state.history != null && this.state.history != 0){\r\n        return(\r\n        <div className=\"row d-flex justify-content-center text-center w-100 m-2\">\r\n            <div className=\"col-md-5\"><CanvasJSChart options = {this.patientGraph(patient)}\r\n\t\t\t\t/* onRef={ref => this.chart = ref} */\r\n\t\t\t/>\r\n                    </div></div>\r\n        )\r\n    }\r\n    else return(\r\n        <h1>No data yet.</h1>\r\n    )\r\n}\r\n\r\npatientGraph(patient){\r\n    var dateData = this.state.patientData;\r\n    console.log(dateData);\r\n    var xPoints = [];\r\n    var yPoints = [];\r\n    var datePoints = [];\r\n    var recovDate = [];\r\n    recovDate.push({x: 0,\r\n                   y: 0})\r\n    const initialDate = new Date(dateData[0].date);\r\n    console.log(initialDate);\r\n    dateData.forEach(element => {\r\n        const currentDate = new Date(element.date);\r\n        var dateDiff = (currentDate - initialDate)/ (1000*60*60*24);\r\n        console.log(dateDiff);\r\n        xPoints.push(dateDiff);\r\n        yPoints.push(this.state.predictionClasses[element.result])\r\n        datePoints.push({x: dateDiff,\r\n                        y: this.state.predictionClasses[element.result]})\r\n    })\r\n    console.log(datePoints);\r\n    \r\n    const projectedRecoveryDate = this.findLineByLeastSquares(xPoints, yPoints);\r\n    \r\n    recovDate.push({x: projectedRecoveryDate,\r\n                     y: 90,\r\n//                     markerColor: \"red\",\r\n//                     markerType: \"triangle\",\r\n//                     indexLabel: \"Projected recovery date\",\r\n//                     indexLabelOrientation: \"vertical\"\r\n                    });\r\n    \r\n    const options = {\r\n\t\t\tanimationEnabled: true,\r\n\t\t\texportEnabled: true,\r\n\t\t\ttheme: \"light2\", // \"light1\", \"dark1\", \"dark2\"\r\n\t\t\ttitle:{\r\n\t\t\t\ttext: patient\r\n\t\t\t},\r\n\t\t\taxisY: {\r\n\t\t\t\ttitle: \"Recovery Rate\",\r\n\t\t\t\tincludeZero: false,\r\n\t\t\t\tsuffix: \"%\"\r\n\t\t\t},\r\n\t\t\taxisX: {\r\n\t\t\t\ttitle: \"Days since start\",\r\n\t\t\t\tprefix: \"D\",\r\n\t\t\t\tinterval: 2\r\n\t\t\t},\r\n\t\t\tdata: [{\r\n\t\t\t\ttype: \"spline\",\r\n                name: \"Recovery timeline\",\r\n\t\t\t\ttoolTipContent: \"Day {x}: {y}%\",\r\n\t\t\t\tdataPoints: datePoints,\r\n                showInLegend: true\r\n\t\t\t},\r\n                  {\r\n\t\t\t\ttype: \"line\",\r\n                      name: \"Projected recovery\",\r\n\t\t\t\ttoolTipContent: \"Day {x}: {y}%\",\r\n                lineDashType: \"dash\",\r\n\t\t\t\tdataPoints: recovDate,\r\n                      showInLegend: true\r\n\t\t\t}]\r\n\t\t}\r\n    \r\n    return options\r\n}\r\n\r\nfindLineByLeastSquares(values_x, values_y) {\r\n    var sum_x = 0;\r\n    var sum_y = 0;\r\n    var sum_xy = 0;\r\n    var sum_xx = 0;\r\n    var count = 0;\r\n\r\n    /*\r\n     * We'll use those variables for faster read/write access.\r\n     */\r\n    var x = 0;\r\n    var y = 0;\r\n    var values_length = values_x.length;\r\n\r\n    if (values_length != values_y.length) {\r\n        throw new Error('The parameters values_x and values_y need to have same size!');\r\n    }\r\n\r\n    /*\r\n     * Nothing to do.\r\n     */\r\n    if (values_length === 0) {\r\n        return [ [], [] ];\r\n    }\r\n\r\n    /*\r\n     * Calculate the sum for each of the parts necessary.\r\n     */\r\n    for (var v = 0; v < values_length; v++) {\r\n        x = values_x[v];\r\n        y = values_y[v];\r\n        sum_x += x;\r\n        sum_y += y;\r\n        sum_xx += x*x;\r\n        sum_xy += x*y;\r\n        count++;\r\n    }\r\n\r\n    /*\r\n     * Calculate m and b for the formular:\r\n     * y = x * m + b\r\n     * x = (y - b) / m\r\n     */\r\n    var m = (count*sum_xy - sum_x*sum_y) / (count*sum_xx - sum_x*sum_x);\r\n    var b = (sum_y/count) - (m*sum_x)/count;\r\n    \r\n    return (90 - b) / m; \r\n\r\n    /*\r\n     * We will make the x and y result line now\r\n     */\r\n//    var result_values_x = [];\r\n//    var result_values_y = [];\r\n//\r\n//    for (var v = 0; v &lt; values_length; v++) {\r\n//        x = values_x[v];\r\n//        y = x * m + b;\r\n//        result_values_x.push(x);\r\n//        result_values_y.push(y);\r\n//    }\r\n//\r\n//    return [result_values_x, result_values_y];\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n            <Navbar name= {this.state.name} user={this.props.location.state.user} login={this.state.login} />\r\n            \r\n            <div className=\"container-fluid d-flex align-items-center justify-content-center h-100\">\r\n                {this.renderGraphsPat(this.state.name)}\r\n            </div>\r\n\r\n            <div className=\"container-fluid d-flex align-items-center justify-content-center h-100\">\r\n                  <div className=\"row\">\r\n                          {this.dataMap()}                      \r\n                  </div>\r\n              </div>\r\n            \r\n            \r\n        </div>\r\n        \r\n    );\r\n  }\r\n}\r\n\r\nexport default History;\r\n"]},"metadata":{},"sourceType":"module"}